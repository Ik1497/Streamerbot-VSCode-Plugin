{
  "void Between()": {
    "prefix": ["CPHBetween"],
    "body": [
      "CPH.Between(${1:int min}, ${2:int max});"
    ]
  },
  "double NextDouble()": {
    "prefix": ["CPHNextDouble"],
    "body": [
      "CPH.NextDouble();"
    ]
  },
  "void Wait()": {
    "prefix": ["CPHWait"],
    "body": [
      "CPH.Wait(${1:int milliseconds});"
    ]
  },
  "string UrlEncode()": {
    "prefix": ["CPHUrlEncode"],
    "body": [
      "CPH.UrlEncode(${1:string text});"
    ]
  },
  "string EscapeString()": {
    "prefix": ["CPHEscapeString"],
    "body": [
      "CPH.EscapeString(${1:string text});"
    ]
  },
  "EventSource GetSource()": {
    "prefix": ["CPHGetSource"],
    "body": [
      "CPH.GetSource();"
    ]
  },
  "EventType GetEventType()": {
    "prefix": ["CPHGetEventType"],
    "body": [
      "CPH.GetEventType();"
    ]
  },
  "bool RunAction()": {
    "prefix": ["CPHRunAction"],
    "body": [
      "CPH.RunAction(${1:string actionName}, ${2:bool runImmediately = true});"
    ]
  },
  "bool RunActionById()": {
    "prefix": ["CPHRunActionById"],
    "body": [
      "CPH.RunAction(${1:string actionId}, ${2:bool runImmediately = true});"
    ]
  },
  "void DisableAction()": {
    "prefix": ["CPHDisableAction"],
    "body": [
      "CPH.DisableAction(${1:string actionName});"
    ]
  },
  "void EnableAction()": {
    "prefix": ["CPHEnableAction"],
    "body": [
      "CPH.EnableAction(${1:string actionName});"
    ]
  },
  "bool ActionExists()": {
    "prefix": ["CPHActionExists"],
    "body": [
      "CPH.ActionExists(${1:string actionName});"
    ]
  },
  "void PauseActionQueue()": {
    "prefix": ["CPHPauseActionQueue"],
    "body": [
      "CPH.PauseActionQueue(${1:string name});"
    ]
  },
  "void PauseAllActionQueues()": {
    "prefix": ["CPHPauseAllActionQueues"],
    "body": [
      "CPH.PauseAllActionQueues();"
    ]
  },
  "void ResumeActionQueue()": {
    "prefix": ["CPHResumeActionQueue"],
    "body": [
      "CPH.ResumeActionQueue(${1:string name}, ${2:bool clear = false});"
    ]
  },
  "void ResumeAllActionQueues()": {
    "prefix": ["CPHResumeAllActionQueues"],
    "body": [
      "CPH.ResumeAllActionQueues(${1:bool clear = false});"
    ]
  },
  "void PlaySound()": {
    "prefix": ["CPHPlaySound"],
    "body": [
      "CPH.PlaySound(${1:string fileName}, ${2:float volume = 1.0f}, ${3:bool finishBeforeContinuing = false});"
    ]
  },
  "void PlaySoundFromFolder()": {
    "prefix": ["CPHPlaySoundFromFolder"],
    "body": [
      "CPH.PlaySoundFromFolder(${1:string path}, ${2:float volume = 1.0f}, ${3:bool recursive = false}, ${4:bool finishBeforeContinuing = false});"
    ]
  },
  "void KeyboardPress()": {
    "prefix": ["CPHKeyboardPress"],
    "body": [
      "CPH.KeyboardPress(${1:string keyPress});"
    ]
  },
  "void ExecuteMethod()": {
    "prefix": ["CPHExecuteMethod"],
    "body": [
      "CPH.ExecuteMethod(${1:string executeCode}, ${2:string methodName});"
    ]
  },
  "void LogInfo()": {
    "prefix": ["CPHLogInfo"],
    "body": [
      "CPH.LogInfo(${1:string logLine});"
    ]
  },
  "void LogWarn()": {
    "prefix": ["CPHLogWarn"],
    "body": [
      "CPH.LogWarn(${1:string logLine});"
    ]
  },
  "void LogDebug()": {
    "prefix": ["CPHLogDebug"],
    "body": [
      "CPH.LogDebug(${1:string logLine});"
    ]
  },
  "void LogVerbose()": {
    "prefix": ["CPHLogVerbose"],
    "body": [
      "CPH.LogVerbose(${1:string logLine});"
    ]
  },
  "void AddToCredits()": {
    "prefix": ["CPHAddToCredits"],
    "body": [
      "CPH.AddToCredits(${1:string section}, ${2:string value}, ${3:bool json = true});"
    ]
  },
  "void ResetCredits()": {
    "prefix": ["CPHResetCredits"],
    "body": [
      "CPH.ResetCredits();"
    ]
  },
  "void ResetFirstWords()": {
    "prefix": ["CPHResetFirstWords"],
    "body": [
      "CPH.ResetFirstWords();"
    ]
  },
  "void DisableTimer()": {
    "prefix": ["CPHDisableTimer"],
    "body": [
      "CPH.DisableTimer(${1:string timerName});"
    ]
  },
  "void EnableTimer()": {
    "prefix": ["CPHEnableTimer"],
    "body": [
      "CPH.EnableTimer(${1:string timerName});"
    ]
  },
  "void SetArgument()": {
    "prefix": ["CPHSetArgument"],
    "body": [
      "CPH.SetArgument(${1:string variableName}, ${2:object value});"
    ]
  }
}